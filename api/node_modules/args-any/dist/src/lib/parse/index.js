"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = exports.operator = exports.prefixSeparator = exports.prefixless = exports.optionMarker = exports.expandSeparator = void 0;
const tslib_1 = require("tslib");
const lodash_1 = require("lodash");
const operator_1 = require("./operator");
Object.defineProperty(exports, "operator", { enumerable: true, get: function () { return operator_1.operator; } });
const expandSeparator_1 = require("./expandSeparator");
Object.defineProperty(exports, "expandSeparator", { enumerable: true, get: function () { return expandSeparator_1.expandSeparator; } });
const option_1 = require("./option");
const prefixless_1 = require("./prefixless");
Object.defineProperty(exports, "optionMarker", { enumerable: true, get: function () { return prefixless_1.optionMarker; } });
Object.defineProperty(exports, "prefixless", { enumerable: true, get: function () { return prefixless_1.prefixless; } });
Object.defineProperty(exports, "prefixSeparator", { enumerable: true, get: function () { return prefixless_1.prefixSeparator; } });
tslib_1.__exportStar(require("./option"), exports);
exports.parse = (args, settings) => {
    const trimChars = '"';
    const normalized = args.reduce((acc, curr) => {
        acc.push(...expandSeparator_1.expandSeparator(lodash_1.trim(curr, trimChars)));
        return acc;
    }, []);
    let keys = normalized.filter(option_1.option.isKey);
    const keyPrefix = (settings && settings.keyPrefix) || false;
    const useValueAsKey = (settings && settings.valueAsKey) || false;
    if (keyPrefix) {
        keys = keys.filter(x => option_1.option.hasPrefix(x, keyPrefix));
    }
    const map = new Map();
    let current = [...normalized];
    for (const key of keys) {
        const itemValue = option_1.option.fromArgs(key, current, settings);
        const itemKey = useValueAsKey ? itemValue.value : prefixless_1.prefixless(key, settings);
        current = current.slice(current.indexOf(key) + 1);
        const exclude = settings && settings.filter && !settings.filter(itemValue);
        if (!exclude) {
            map.set(itemKey, itemValue);
        }
    }
    return map;
};
//# sourceMappingURL=index.js.map